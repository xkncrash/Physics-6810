README.txt for grav_test.cpp

	   While comments are included before and during the code of the main program, this README should help navigate it and the other files connected to it. As mentioned, this grav_test program simulates N-body orbital dynamics using a gsl Ode solver. This code uses the unmodified GslOde.cpp + .h to solve and evolve the given rhs equation while throwing out the Jacobian which was next to impossible to solve and not utilized in our ode functions. To print the results, this function outputs to a .dat file named after the number of objects as well as print in time the plot of the system. The plot is outputted using a modified GnuplotPipe to work with our system. This output is solver dependent, so in complex systems, it can get a little jittery. It will output a .ps file named similarly to the .dat file.
	   To test the accuracy of the code, at least for 2-body dynamics, activate the earth_test boolean. This will plug in Sun-Earth variables into the solver to compare with analytical solutions and output the relative error in a cout. As seen, the solver can get really good accuracy in 2-body dynamics with errors usually existing below 0.1%. To alter the size of the error and possibly load times, delta_t directly affects this error where a greater delta_t generates greater error. I'm not certain why this is as the ode_solver doesn't use delta_t, but an adaptive solver to find the numerical solution. This might be due to the final output not equaling the max time, and a lower delta_t lowers the difference between final time and the max time, used in the analytical solution. 
	   When choosing tmax, the load time of the solver is insignificant to the type of delay timer involved with the plot function. There's a chance the plot function could crash in large enough times or take too long. In this case, ctrl + c should work, but you need to press if very quickly after activating the terminal as the next gnuplot plot could take the cursor. If you want the code to run more quickly, just for data points in the .dat files, go to evolve_and_print and set run_gnuplot to 0.
	   To view a preset 3-body system, activate the three_body boolean which will overwrite several array elements like in the earth_test. To view a stationary system, set the fixed_CoM to 1, otherwise set it to 0. If the system isn't perfectly set up, this system may fly out of frame with the fixed_CoM turned off.
	   A future goal for this project would be to set up gif generating software, like its python predecessor, and to have the "current" data point output as a point instead of a line to properly witness stable orbits.
